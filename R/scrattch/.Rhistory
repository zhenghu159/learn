library(Seurat)
?NormalizeData
# Create test matrix
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
# Draw heatmaps
pheatmap(test)
library(pheatmap)
# Draw heatmaps
pheatmap(test)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation")
pheatmap(test, cluster_row = FALSE)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=100)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=1000)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=10)
setwd("F:/1.课题/software_tutorial/R/scrattch")
getwd()
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(echo = T)
knitr::opts_chunk$set(echo = T)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
setwd("C:/Users/13081/OneDrive - webmail.hzau.edu.cn/Github/learn/R/scrattch")
knitr::opts_chunk$set(echo = T)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
str(tasic_2016_anno)
head(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_anno)
head(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
tasic_2016_counts[1:5,1:5]
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
head(tasic_2016_counts[,1:5])
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
tasic_2016_counts[,1:5]
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
tasic_2016_counts[1:5,1:5]
select.cells <- tasic_2016_anno %>%
filter(primary_type != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3",primary_type)) %>%
select(sample_id) %>%
unlist()
dim(tasic_2016_anno)
head(tasic_2016_anno)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
select.cells <- tasic_2016_anno %>%
filter(primary_type != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3",primary_type)) %>%
select(sample_id) %>%
unlist()
table(tasic_2016_anno$primary_type_label)
table(tasic_2016_anno$primary_type_color)
table(tasic_2016_anno$primary_type_label)
select.cells <- tasic_2016_anno %>%
filter(primary_type_label != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3", primary_type_label)) %>%
select(sample_id) %>%
unlist()
head(tasic_2016_anno)
select.cells <- tasic_2016_anno %>%
filter(primary_type_label != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3", primary_type_label)) %>%
select(sample_name) %>%
unlist()
length(select.cells)
head(select.cells)
head(tasic_2016_anno)
ref_anno <- tasic_2016_anno %>%
filter(sample_name %in% select.cells)
# Make a data.frame of unique cluster id, type, color, and broad type
ref.cl.df <- ref_anno %>%
select(primary_type_id,
primary_type_label,
primary_type_color,
broad_type) %>%
unique()
#standardize cluster annoation with cluster_id, cluster_label and cluster_color. These are the required fields to visualize clusters properly.
colnames(ref.cl.df)[1:3] <- c("cluster_id", "cluster_label", "cluster_color")
# Sort by cluster_id
ref.cl.df <- arrange(ref.cl.df, cluster_id)
row.names(ref.cl.df) <- ref.cl.df$cluster_id
# Set up the ref.cl factor object
ref.cl <- setNames(factor(ref_anno$primary_type_id), ref_anno$sample_id)
head(ref.cl.df)
dim(ref.cl)
head(ref_anno)
dim(ref_anno)
ref_anno <- tasic_2016_anno %>%
filter(sample_name %in% select.cells)
# Make a data.frame of unique cluster id, type, color, and broad type
ref.cl.df <- ref_anno %>%
select(primary_type_id,
primary_type_label,
primary_type_color,
broad_type) %>%
unique()
#standardize cluster annoation with cluster_id, cluster_label and cluster_color. These are the required fields to visualize clusters properly.
colnames(ref.cl.df)[1:3] <- c("cluster_id", "cluster_label", "cluster_color")
# Sort by cluster_id
ref.cl.df <- arrange(ref.cl.df, cluster_id)
row.names(ref.cl.df) <- ref.cl.df$cluster_id
# Set up the ref.cl factor object
ref.cl <- setNames(factor(ref_anno$primary_type_id), ref_anno$sample_name)
head(ref.cl)
head(ref.cl.df)
head(ref.cl)
head(select.cells)
tasic_2016_cpm <- cpm(tasic_2016_counts[,select.cells])
norm.dat <- log2(tasic_2016_cpm + 1)
norm.dat <- Matrix(norm.dat, sparse = TRUE)
