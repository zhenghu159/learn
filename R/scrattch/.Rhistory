library(Seurat)
?NormalizeData
# Create test matrix
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
# Draw heatmaps
pheatmap(test)
library(pheatmap)
# Draw heatmaps
pheatmap(test)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation")
pheatmap(test, cluster_row = FALSE)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=100)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=1000)
# 聚类相关参数
pheatmap(test, scale = "row", clustering_distance_rows = "correlation", cutree_rows = 3, treeheight_row=10)
devtools::install_github("i-cyto/Rphenograph")
setwd("C:/Users/13081/OneDrive - webmail.hzau.edu.cn/Github/learn/R/scrattch")
knitr::opts_chunk$set(echo = T, warning = F)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
tasic_2016_counts[1:5,1:5]
select.cells <- tasic_2016_anno %>%
filter(primary_type_label != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3", primary_type_label)) %>%
select(sample_name) %>%
unlist()
length(select.cells)
ref_anno <- tasic_2016_anno %>%
filter(sample_name %in% select.cells)
# Make a data.frame of unique cluster id, type, color, and broad type
ref.cl.df <- ref_anno %>%
select(primary_type_id,
primary_type_label,
primary_type_color,
broad_type) %>%
unique()
#standardize cluster annoation with cluster_id, cluster_label and cluster_color. These are the required fields to visualize clusters properly.
colnames(ref.cl.df)[1:3] <- c("cluster_id", "cluster_label", "cluster_color")
# Sort by cluster_id
ref.cl.df <- arrange(ref.cl.df, cluster_id)
row.names(ref.cl.df) <- ref.cl.df$cluster_id
# Set up the ref.cl factor object
ref.cl <- setNames(factor(ref_anno$primary_type_id), ref_anno$sample_name)
head(ref.cl.df)
head(ref.cl)
tasic_2016_cpm <- cpm(tasic_2016_counts[,select.cells])
norm.dat <- log2(tasic_2016_cpm + 1)
norm.dat <- Matrix(norm.dat, sparse = TRUE)
de.param <- de_param(padj.th     = 0.05,
lfc.th      = 1,
low.th      = 1,
q1.th       = 0.3,
q2.th       = NULL,
q.diff.th   = 0.7,
de.score.th = 40,
min.cells   = 10,
min.genes = 5)
gene.counts <- colSums(norm.dat > 0)
rm.eigen <- matrix(log2(gene.counts), ncol = 1)
row.names(rm.eigen) <- names(gene.counts)
colnames(rm.eigen) <- "log2GeneCounts"
strict.param <- de_param(de.score.th = 500)
onestep.result <- onestep_clust(norm.dat,
select.cells = select.cells,
dim.method = "pca",
de.param = strict.param,
rm.eigen = rm.eigen)
display.result <- display_cl(onestep.result$cl, norm.dat, plot = TRUE, de.param = de.param)
onestep.result
？display_cl
?display_cl
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
？iter_clust
?iter_clust
iter.result <- iter_clust(norm.dat,
select.cells = select.cells,
dim.method = "pca",
de.param = de.param,
rm.eigen = rm.eigen,
result = onestep.result)
display.result <- display_cl(iter.result$cl, norm.dat, plot = TRUE, de.param = de.param)
iter.result$markers
dim.method <- "WGCNA"
explore.param <- de_param(padj.th     = 0.05,
lfc.th      = 1,
low.th      = 1,
q1.th       = 0.5,
q2.th       = NULL,
q.diff.th   = 0.7,
de.score.th = 40)
explore.result <- onestep_clust(norm.dat,
select.cells = select.cells,
dim.method = dim.method,
de.param = explore.param,
rm.eigen = rm.eigen)
display.result <- display_cl(explore.result$cl,
norm.dat,
plot = TRUE,
de.param = explore.param)
rd.dat <- t(norm.dat[iter.result$markers, select.cells])
dim(rd.dat)
rd.dat[1:5,1:5]
rd.dat <- t(norm.dat[iter.result$markers, select.cells])
merge.param <- de_param(de.score.th = 70) # The original value was 40.
merge.result <- merge_cl(norm.dat,
cl = iter.result$cl,
rd.dat = rd.dat,
de.param = merge.param)
display.result <- display_cl(merge.result$cl,
norm.dat,
plot = TRUE,
de.param = merge.param)
?merge_cl
iter.result$cl
merge.result
# Set up the cl and cl.df objects for use with compare_annotate()
iter.cl <- setNames(as.factor(iter.result$cl), select.cells)
iter.cl.df <- data.frame(cluster_id = unique(iter.cl),
cluster_label = paste0("Pre-merge_cl_",unique(iter.cl)),
cluster_color = rainbow(length(unique(iter.cl))))
rownames(iter.cl.df) <- iter.cl.df$cluster_id
compare.result <- compare_annotate(merge.result$cl, iter.cl, iter.cl.df)
compare.result$g
# Generate comparison
compare.result <- compare_annotate(iter.result$cl, ref.cl, ref.cl.df)
# Output the plot
compare.result$g
# Get cl factors and data.frame
cl <- compare.result$cl
cl.df <- compare.result$cl.df
display.result <- display_cl(cl,
norm.dat,
plot=TRUE,
de.param = de.param,
n.markers = 20)
de.genes <- display.result$de.genes
de.genes
