strsplit(list.files[1], split = '.',  fixed = T)[[1]][1]
length(list.files)
paste(sample_name,'_spatial.h5Seurat',sep = '')
suppressMessages(library(Seurat))
suppressMessages(library(Matrix))
suppressMessages(library(tidyverse))
suppressMessages(library(data.table))
matrix2seurat <- function(file){
# 读入文件
orgin_mat = fread(file, header = F, sep = "\t", data.table = F)
colnames(orgin_mat) = c("geneID","x","y","UMICount","cell_id","gene_area","rx","ry")
orgin_mat <- orgin_mat[orgin_mat$cell_id != 0,] #去掉cell_id=0的行，为非海马区
#将矩阵转为seurat对象
expr <- orgin_mat #备份初始矩阵来进行操作
binData = expr[,c('geneID', 'UMICount', 'cell_id')] #只取'geneID', 'UMICount', 'cell_id'三列
binData[,1] <- factor(binData[,1]) #将向量变为因子
binData[,3] <- factor(binData[,3])
dimnames <- list() #geneID 级别提供对变量的 levels 属性的访问。
# 第一种形式返回其参数的级别值，第二种形式设置属性。
dimnames[[1]] <- levels(binData[,1])
dimnames[[2]] <- levels(binData[,3])
smatrix <- sparseMatrix(as.integer(binData[,1]), as.integer(binData[,3]), x = binData[,2], dimnames = dimnames)
# sparseMatrix构造一个压缩的、面向列的稀疏矩阵，as.integer表示强制转换为整数，大概意思就是变成稀疏矩阵，
# 用"geneID"做行名,"cellN"位置信息做列名，"UMICount"进行填充
spa_matrix <- CreateSeuratObject(count = smatrix,
project = "Spatial",
min.cells = 3,
min.features = 0)
print(nrow(spa_matrix@meta.data)) #查看他有多少个细胞
spa_matrix@meta.data$cell <- rownames(spa_matrix@meta.data) # 给spa_matrix@meta.data加cell列
rownames(spa_matrix@meta.data) <- spa_matrix@meta.data$cell
# 添加细胞体积信息
mat <- orgin_mat #备份一个文件来进行操作
list_xmin <- unlist(tapply(mat[,'x'], mat[,'cell_id'], min)) #找出每一个cellN即细胞ID的xPos的最小值
list_xmax <- unlist(tapply(mat[,'x'], mat[,'cell_id'], max)) #找出每一个cellN即细胞ID的xPos的最大值
list_ymin <- unlist(tapply(mat[,'y'], mat[,'cell_id'], min)) #同上
list_ymax <- unlist(tapply(mat[,'y'], mat[,'cell_id'], max))
t <- data.frame(x_min = list_xmin, x_max = list_xmax, y_min = list_ymin, y_max = list_ymax) #把x和y的最小值和最大值都添加到t中
rownames(t) <- names(list_xmin) #给t加行名
t <- apply(t, c(1,2), as.numeric) #创建或强制“numeric”类型的对象
volume <- unlist(apply(t, 1, function(entry) (entry[2] - entry[1]) * (entry[4] - entry[3]))) #用x的最大值减最小值乘y的最大值减最小值作为细胞的体积
mat_volume <- cbind(t, volume) #合并他们两个
mat_volume <- as.data.frame(mat_volume) #转为data.frame
mat_volume$cell <- rownames(mat_volume) #在末尾加一列细胞名
mat_volume <- mat_volume[,c('cell', 'volume')] # 按'cell', 'volume'来排列两列
spa_matrix@meta.data <- merge(spa_matrix@meta.data, mat_volume, by = 'cell') # 将spa_matrix@meta.data和mat_volume(只有'cell', 'volume'两列)根据cell合并起来
# 添加 percent.mt 线粒体比例
MTG = c("ND6","COX3","COX1","ND5","ND4","ND2","ND4L","ATP8","CYTB","COX2","ND3","ATP6","ND1") #和线粒体相关的基因
spa_matrix <- PercentageFeatureSet(spa_matrix, features = MTG, col.name = "percent.mt") #加一列线粒体相关基因的比例
# 添加 x，y 轴信息
mat_loc <- orgin_mat[,c('x','y','cell_id')] # mat_loc只要'xPos','yPos','cellN'
mat_loc <- mat_loc[!(duplicated(mat_loc$cell_id)),] # 按cellN去除重复的坐标，一个可能对应多个坐标，按照这个去重方式的话，应该是保留的这个细胞出现的第一个的x和y坐标
rownames(mat_loc) <- as.character(mat_loc$cell_id) # 把细胞名作为行名
mat_loc <- mat_loc[colnames(spa_matrix),] # 把spa_matrix中还剩的9879个细胞的x和y坐标提取出来
mat_loc <- mat_loc[,c('cell_id', 'x', 'y')] #取相反数的那几列为坐标
colnames(mat_loc)[1] <- 'cell' #第一列的列名变为cell
spa_matrix@meta.data <- merge(spa_matrix@meta.data, mat_loc, by = 'cell')
suppressMessages(library(SeuratDisk))
sample_name <- strsplit(file, split = '.',  fixed = T)[[1]][1]
h5seurat <- paste(sample_name,'_spatial.h5Seurat',sep = '')
SaveH5Seurat(spa_matrix, filename = h5seurat)
Convert(h5seurat, dest = "h5ad")
file.remove(h5seurat)
}
# 输入 txt 文件
list.files <- list.files(path = ".", pattern = '*.txt')
for (i in 1:length(list.files)){
matrix2seurat(list.files[i])
}
matrix2seurat <- function(file){
# 读入文件
orgin_mat = fread(file, header = F, sep = "\t", data.table = F)
colnames(orgin_mat) = c("geneID","x","y","UMICount","cell_id","gene_area","rx","ry")
orgin_mat <- orgin_mat[orgin_mat$cell_id != 0,] #去掉cell_id=0的行，为非海马区
#将矩阵转为seurat对象
expr <- orgin_mat #备份初始矩阵来进行操作
binData = expr[,c('geneID', 'UMICount', 'cell_id')] #只取'geneID', 'UMICount', 'cell_id'三列
binData[,1] <- factor(binData[,1]) #将向量变为因子
binData[,3] <- factor(binData[,3])
dimnames <- list() #geneID 级别提供对变量的 levels 属性的访问。
# 第一种形式返回其参数的级别值，第二种形式设置属性。
dimnames[[1]] <- levels(binData[,1])
dimnames[[2]] <- levels(binData[,3])
smatrix <- sparseMatrix(as.integer(binData[,1]), as.integer(binData[,3]), x = binData[,2], dimnames = dimnames)
# sparseMatrix构造一个压缩的、面向列的稀疏矩阵，as.integer表示强制转换为整数，大概意思就是变成稀疏矩阵，
# 用"geneID"做行名,"cellN"位置信息做列名，"UMICount"进行填充
spa_matrix <- CreateSeuratObject(count = smatrix,
project = "Spatial",
min.cells = 3,
min.features = 0)
print(nrow(spa_matrix@meta.data)) #查看他有多少个细胞
spa_matrix@meta.data$cell <- rownames(spa_matrix@meta.data) # 给spa_matrix@meta.data加cell列
rownames(spa_matrix@meta.data) <- spa_matrix@meta.data$cell
# 添加细胞体积信息
mat <- orgin_mat #备份一个文件来进行操作
list_xmin <- unlist(tapply(mat[,'x'], mat[,'cell_id'], min)) #找出每一个cellN即细胞ID的xPos的最小值
list_xmax <- unlist(tapply(mat[,'x'], mat[,'cell_id'], max)) #找出每一个cellN即细胞ID的xPos的最大值
list_ymin <- unlist(tapply(mat[,'y'], mat[,'cell_id'], min)) #同上
list_ymax <- unlist(tapply(mat[,'y'], mat[,'cell_id'], max))
t <- data.frame(x_min = list_xmin, x_max = list_xmax, y_min = list_ymin, y_max = list_ymax) #把x和y的最小值和最大值都添加到t中
rownames(t) <- names(list_xmin) #给t加行名
t <- apply(t, c(1,2), as.numeric) #创建或强制“numeric”类型的对象
volume <- unlist(apply(t, 1, function(entry) (entry[2] - entry[1]) * (entry[4] - entry[3]))) #用x的最大值减最小值乘y的最大值减最小值作为细胞的体积
mat_volume <- cbind(t, volume) #合并他们两个
mat_volume <- as.data.frame(mat_volume) #转为data.frame
mat_volume$cell <- rownames(mat_volume) #在末尾加一列细胞名
mat_volume <- mat_volume[,c('cell', 'volume')] # 按'cell', 'volume'来排列两列
spa_matrix@meta.data <- merge(spa_matrix@meta.data, mat_volume, by = 'cell') # 将spa_matrix@meta.data和mat_volume(只有'cell', 'volume'两列)根据cell合并起来
# 添加 percent.mt 线粒体比例
MTG = c("ND6","COX3","COX1","ND5","ND4","ND2","ND4L","ATP8","CYTB","COX2","ND3","ATP6","ND1") #和线粒体相关的基因
spa_matrix <- PercentageFeatureSet(spa_matrix, features = MTG, col.name = "percent.mt") #加一列线粒体相关基因的比例
# 添加 x，y 轴信息
mat_loc <- orgin_mat[,c('x','y','cell_id')] # mat_loc只要'xPos','yPos','cellN'
mat_loc <- mat_loc[!(duplicated(mat_loc$cell_id)),] # 按cellN去除重复的坐标，一个可能对应多个坐标，按照这个去重方式的话，应该是保留的这个细胞出现的第一个的x和y坐标
rownames(mat_loc) <- as.character(mat_loc$cell_id) # 把细胞名作为行名
mat_loc <- mat_loc[colnames(spa_matrix),] # 把spa_matrix中还剩的9879个细胞的x和y坐标提取出来
mat_loc <- mat_loc[,c('cell_id', 'x', 'y')] #取相反数的那几列为坐标
colnames(mat_loc)[1] <- 'cell' #第一列的列名变为cell
spa_matrix@meta.data <- merge(spa_matrix@meta.data, mat_loc, by = 'cell')
# 保存rds文件
sample_name <- strsplit(file, split = '.',  fixed = T)[[1]][1]
rds_file <- paste(sample_name, '_spatial.rds',sep = '')
saveRDS(spa_matrix, rds_file)
#保存h5ad文件
suppressMessages(library(SeuratDisk))
h5seurat <- paste(sample_name,'_spatial.h5Seurat',sep = '')
SaveH5Seurat(spa_matrix, filename = h5seurat)
Convert(h5seurat, dest = "h5ad")
file.remove(h5seurat)
}
# 输入 txt 文件
list.files <- list.files(path = ".", pattern = '*.txt')
for (i in 1:length(list.files)){
matrix2seurat(list.files[i])
}
setwd("F:/1.课题/2.海马空间转录组/1.实验汇总/data/scRNAseq")
library(Seurat)
# 单细胞文件格式转换
setwd('F:/1.课题/2.海马空间转录组/1.实验汇总/data/scRNAseq')
sc_seurat <- readRDS('Macaque_hippocampus_14089_cell_cluster_annotaion_mainType_field_subtype.rds.gz')
head(sc_seurat)
sc_seurat$merge_anno <- paste(sc_seurat$MainType, sc_seurat$cluster_id, sc_seurat$field, sc_seurat$cluster_gene, sep = '_')
head(sc_seurat)
# cell2location 输入的是原始的counts，选择原始的counts矩阵重新构建 seurat 对象
sc_seurat_count <- CreateSeuratObject(count = sc_seurat@assays$RNA@counts,
project = "Macaque_scRNAseq",
min.cells = 3,
min.features = 0,
meta.data = sc_seurat@meta.data)
SaveH5Seurat(sc_seurat_count, filename = "Macaque_hippocampus_14089_cell.h5Seurat")
Convert("Macaque_hippocampus_14089_cell.h5Seurat", dest = "h5ad")
file.remove("Macaque_hippocampus_14089_cell.h5Seurat")
setwd("C:/Users/13081/OneDrive - webmail.hzau.edu.cn/Github/learn/R/scrattch")
knitr::opts_chunk$set(echo = T, warning = F)
de.genes <- display.result$de.genes
knitr::opts_chunk$set(echo = T, warning = FALSE)
library(tasic2016data)
library(scrattch.hicat)
library(dendextend)
library(dplyr)
library(matrixStats)
library(Matrix)
knitr::opts_chunk$set(echo = T, warning = FALSE)
suppressMessages(library(tasic2016data))
suppressMessages(library(scrattch.hicat))
suppressMessages(library(dendextend))
suppressMessages(library(dplyr))
suppressMessages(library(matrixStats))
suppressMessages(library(Matrix))
dim(tasic_2016_anno)
head(tasic_2016_anno)
dim(tasic_2016_counts)
tasic_2016_counts[1:5,1:5]
select.cells <- tasic_2016_anno %>%
filter(primary_type_label != "unclassified") %>%
filter(grepl("Igtp|Ndnf|Vip|Sncg|Smad3", primary_type_label)) %>%
select(sample_name) %>%
unlist()
length(select.cells)
ref_anno <- tasic_2016_anno %>%
filter(sample_name %in% select.cells)
# Make a data.frame of unique cluster id, type, color, and broad type
ref.cl.df <- ref_anno %>%
select(primary_type_id,
primary_type_label,
primary_type_color,
broad_type) %>%
unique()
#standardize cluster annoation with cluster_id, cluster_label and cluster_color. These are the required fields to visualize clusters properly.
colnames(ref.cl.df)[1:3] <- c("cluster_id", "cluster_label", "cluster_color")
# Sort by cluster_id
ref.cl.df <- arrange(ref.cl.df, cluster_id)
row.names(ref.cl.df) <- ref.cl.df$cluster_id
# Set up the ref.cl factor object
ref.cl <- setNames(factor(ref_anno$primary_type_id), ref_anno$sample_name)
head(ref.cl.df)
head(ref.cl)
tasic_2016_cpm <- cpm(tasic_2016_counts[,select.cells])
norm.dat <- log2(tasic_2016_cpm + 1)
norm.dat <- Matrix(norm.dat, sparse = TRUE)
de.param <- de_param(padj.th     = 0.05,
lfc.th      = 1,
low.th      = 1,
q1.th       = 0.3,
q2.th       = NULL,
q.diff.th   = 0.7,
de.score.th = 40,
min.cells   = 10,
min.genes = 5)
gene.counts <- colSums(norm.dat > 0)
rm.eigen <- matrix(log2(gene.counts), ncol = 1)
row.names(rm.eigen) <- names(gene.counts)
colnames(rm.eigen) <- "log2GeneCounts"
strict.param <- de_param(de.score.th = 500)
onestep.result <- onestep_clust(norm.dat,
select.cells = select.cells,
dim.method = "pca",
de.param = strict.param,
rm.eigen = rm.eigen)
display.result <- display_cl(onestep.result$cl, norm.dat, plot = TRUE, de.param = de.param)
iter.result <- iter_clust(norm.dat,
select.cells = select.cells,
dim.method = "pca",
de.param = de.param,
rm.eigen = rm.eigen,
result = onestep.result)
display.result <- display_cl(iter.result$cl, norm.dat, plot = TRUE, de.param = de.param)
dim.method <- "WGCNA"
explore.param <- de_param(padj.th     = 0.05,
lfc.th      = 1,
low.th      = 1,
q1.th       = 0.5,
q2.th       = NULL,
q.diff.th   = 0.7,
de.score.th = 40)
explore.result <- onestep_clust(norm.dat,
select.cells = select.cells,
dim.method = dim.method,
de.param = explore.param,
rm.eigen = rm.eigen)
display.result <- display_cl(explore.result$cl,
norm.dat,
plot = TRUE,
de.param = explore.param)
rd.dat <- t(norm.dat[iter.result$markers, select.cells])
merge.param <- de_param(de.score.th = 70) # The original value was 40.
merge.result <- merge_cl(norm.dat,
cl = iter.result$cl,
rd.dat = rd.dat,
de.param = merge.param)
display.result <- display_cl(merge.result$cl,
norm.dat,
plot = TRUE,
de.param = merge.param)
# Set up the cl and cl.df objects for use with compare_annotate()
iter.cl <- setNames(as.factor(iter.result$cl), select.cells)
iter.cl.df <- data.frame(cluster_id = unique(iter.cl),
cluster_label = paste0("Pre-merge_cl_",unique(iter.cl)),
cluster_color = rainbow(length(unique(iter.cl))))
rownames(iter.cl.df) <- iter.cl.df$cluster_id
compare.result <- compare_annotate(merge.result$cl, iter.cl, iter.cl.df)
compare.result$g
# Generate comparison
compare.result <- compare_annotate(iter.result$cl, ref.cl, ref.cl.df)
# Output the plot
compare.result$g
# Get cl factors and data.frame
cl <- compare.result$cl
cl.df <- compare.result$cl.df
display.result <- display_cl(cl,
norm.dat,
plot=TRUE,
de.param = de.param,
n.markers = 20)
de.genes <- display.result$de.genes
set.seed(12345)
result <- run_consensus_clust(norm.dat[,select.cells],
select.cells = select.cells,
niter = 100,
de.param = de.param,
rm.eigen = rm.eigen,
dim.method = "PCA",
output_dir = "subsample_PCA")
set.seed(12345)
result <- run_consensus_clust(norm.dat[,select.cells],
select.cells = select.cells,
niter = 100,
de.param = de.param,
rm.eigen = rm.eigen,
dim.method = "pca",
output_dir = "subsample_PCA")
head(sc_seurat)
write.csv(sc_seurat$merge_anno,file)
unique(sc_seurat$merge_anno)
?run_consensus_clust
compare.result <- compare_annotate(result$cl.result$cl, ref.cl, ref.cl.df)
compare.result$g
?compare_annotate
result$cl
result$cl.result$cl
result$cl.result
dim(ref.cl.df)
ref.cl.df
consensus.cl <- compare.result$cl
consensus.cl.df <- compare.result$cl.df
co.ratio <- result$co.result$co.ratio
co.matrix.plot <- plot_co_matrix(co.ratio,
consensus.cl,
max.cl.size = 50)
co.ratio
result$co.result
result$co.result$cl.list
?plot_co_matrix
?plot_co_matrix()
?plot_co_matrix()
??plot_co_matrix()
consensus.cl
result$co.result$cl.mat
consensus.cl <- compare.result$cl
consensus.cl.df <- compare.result$cl.df
co.ratio <- result$co.result$cl.mat
co.matrix.plot <- plot_co_matrix(co.ratio,
consensus.cl,
max.cl.size = 50)
consensus.cl.df
co.ratio
consensus.cl.df
consensus.cl
consensus.cl <- compare.result$cl
consensus.cl.df <- compare.result$cl.df
co.ratio <- result$co.result$cl.mat
co.matrix.plot <- plot_co_matrix(co.ratio,
consensus.cl.df,
max.cl.size = 50)
result$co.result$cl.list
consensus.cl
compare.result$cl
compare.result$cl.df
compare.result$g
compare.result$tb.df
compare.result$absent.cl
compare.result$cl.id.map
consensus.cl <- compare.result$cl
consensus.cl.df <- compare.result$cl.df
co.ratio <- result$co.result$cl.mat
co.matrix.plot <- plot_co_matrix(co.ratio,
consensus.cl,
max.cl.size = 50)
result$co.result$cl.list$`subsample_PCA/result.100.rda`
compare.result$cl
dim(v)
dim(consensus.cl)
length(consensus.cl)
dim(co.ratio)
co.ratio[1:5,1:5]
head(consensus.cl)
cl.clean <- droplevels(consensus.cl)
head(cl.clean)
select.markers <- select_markers(norm.dat,
cl.clean,
de.genes = de.genes,
n.markers = 50)
marker.genes <- select.markers$markers
de.genes <- select.markers$de.genes
cl.med <- get_cl_medians(norm.dat[marker.genes,],
cl.clean)
##The prefered order for the leaf nodes.
l.rank <- setNames(1:nrow(consensus.cl.df),
row.names(consensus.cl.df))
##Color of the leaf nodes.
l.color <- setNames(as.character(consensus.cl.df$cluster_color), row.names(consensus.cl.df))
# Build the dendrogram
dend.result <- build_dend(cl.med[,levels(cl.clean)],
l.rank,
l.color,
nboot = 100)
dend <- dend.result$dend
###attach cluster labels to the leaves of the tree
dend.labeled <- dend
labels(dend.labeled) <- consensus.cl.df[labels(dend), "cluster_label"]
plot(dend.labeled)
select.markers <- select_markers(norm.dat,
cl.clean,
de.genes = de.genes,
n.markers = 50)
marker.genes <- select.markers$markers
de.genes <- select.markers$de.genes
cl.med <- get_cl_medians(norm.dat[marker.genes,],
cl.clean)
##The prefered order for the leaf nodes.
l.rank <- setNames(1:nrow(consensus.cl.df),
row.names(consensus.cl.df))
##Color of the leaf nodes.
l.color <- setNames(as.character(consensus.cl.df$cluster_color), row.names(consensus.cl.df))
# Build the dendrogram
dend.result <- build_dend(cl.med[,levels(cl.clean)],
l.rank,
l.color,
nboot = 100)
dend <- dend.result$dend
###attach cluster labels to the leaves of the tree
dend.labeled <- dend
labels(dend.labeled) <- consensus.cl.df[labels(dend), "cluster_label"]
plot(dend.labeled)
cl.clean <- setNames(factor(as.character(cl.clean), levels = labels(dend)), names(cl.clean))
cl.df.clean <- cl.df[levels(cl.clean),]
cl.cor <- dend.result$cl.cor
row.names(cl.cor) <- colnames(cl.cor) <- consensus.cl.df[row.names(cl.cor), "cluster_label"]
cl.cor
dend.result$cl.cor
dend.result$dend
dend.result$pvclust.result
dend.result$cl.cor
dim(dend.result$pvclust.result)
dend.result$pvclust.result$hclust
dend.result$pvclust.result$edges
dend.result$pvclust.result$count
dend.result$pvclust.result$msfit
tsne.result <- plot_tsne_cl(norm.dat, marker.genes, consensus.cl, consensus.cl.df, fn.size=5, cex=1)
tsne.df <- tsne.result$tsne.df
tsne.result$g
tsne.df <- tsne.result$tsne.df
## 6330527O06Rik is alias for Lamp5, and A930038C07Rik is alais for Ndnf
markers <- c("Vip","6330527O06Rik","Sncg","Cxcl14","Gpc3","A930038C07Rik")
gene.plots <- plot_tsne_gene(tsne.df, norm.dat, markers)
dim(tsne.df)
head(tsne.df)
?plot_tsne_gene
?display_cl
?scrattch.hicat
??scrattch.hicat
??scrattch
marker_results <- select_markers(norm.dat, ref.cl)
marker_genes <- marker_results$markers
norm.cadwell_2016_data <- log2(cpm(cadwell_2016_data) + 1)
df1 <- data.frame(c(1,2,3),c(1,2,3),c(1,2,3))
df1
?c(1,2,3)
?data.frame
df1 <- martix(1:9,ncol=3)
df1 <- data.frame('A'=c(1,2,3),'B'=c(1,2,3),'C'=c(1,2,3))
df1
rownames(df1)=colnames(df1)
df1
df2 <- data.frame('A'=c(1,2,3),'B'=c(1,2,3),'E'=c(1,2,3))
rownames(df2)=colnames(df2)
df1
df2
colnames(df1) <- c(1,2,3)
colnames(df2) <- c(1,2,3)
df1
df2
df1$gene <- rownames(df1)
df2$gene <- rownames(df2)
df1
df2
merge(df1,df2,by='gene')
merge(df1,df2,by='gene',all = T)
setwd("F:/1.课题/2.海马空间转录组/1.实验汇总/result/cell2location")
library(ggplot2)
library(cowplot)
hue_pal()(32)
library(scales)
hue_pal()(32)
library(ggplot2)
library(cowplot)
library(scales)
file <- 'results/macaque_T28_analysis/merge_anno/T28_cell2location_result.csv'
cell2location_result <- read.csv(file, row.names = 1)
head(cell2location_result)
unique(cell2location_result$Cell_Type)
cell2location_result$Cell_Type <- factor(cell2location_result$Cell_Type)
head(cell2location_result$Cell_Type)
levels(cell2location_result$Cell_Type)
celltype <- levels(cell2location_result$Cell_Type)
celltypecolor <- hue_pal()(length(celltype))
celltypecolor
p <- ggplot(data = cell2location_result) +
geom_point(mapping = aes(x=x, y=y, color=Cell_Type)) +
scale_color_manual(values = celltypecolor) +
labs(x='X', y='Y', title = 'T28 Cell2location Transfer') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
legend.title=element_blank(),
text = element_text(size = 20))+
guides(colour = guide_legend(override.aes = list(size=5)))
p
Bior_Highlight_point <- function(df, highlight_celltype, highlight_color){
df$color <- 'no'
df$color[which(df$Cell_Type == highlight_celltype)] <- 'yes'
df$color <- factor(df$color, levels = c('no', 'yes'))
df <- df[order(df$color),]
ggplot(data = df) +
geom_point(mapping = aes(x=x, y=y, color=color)) +
scale_color_manual(values = c('lightgray',highlight_color)) +
labs(x='X', y='Y', title = highlight_celltype) +
theme_classic() +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5),
text = element_text(size = 20))
}
plotlist <- list()
for (i in 1:length(celltype)){
plotlist[[i]] <- Bior_Highlight_point(cell2location_result, celltype[i], celltypecolor[i])
}
length(celltype)
p <- plot_grid(plotlist = plotlist, ncol = 6)
p
head(sc_seurat)
setwd("C:/Users/13081/OneDrive - webmail.hzau.edu.cn/Github/learn/R/scrattch")
marker_results <- select_markers(norm.dat, ref.cl)
marker_genes <- marker_results$markers
norm.cadwell_2016_data <- log2(cpm(cadwell_2016_data) + 1)
