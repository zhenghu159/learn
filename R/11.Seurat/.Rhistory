df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="both", min.segment.length = 0.05,
segment.alpha=0.6, max.overlaps =30) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
head(seurat_obj)
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
head(seurat_obj@meta.data[,module1])
rowMeans(seurat_obj@meta.data[,module1])
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
seurat_obj$module1 <- rowMeans(seurat_obj@meta.data[,module1])
seurat_obj$module2 <- rowMeans(seurat_obj@meta.data[,module2])
seurat_obj$module3 <- rowMeans(seurat_obj@meta.data[,module3])
head(seurat_obj)
seurat_obj <- SetupForWGCNA(
seurat_obj,
gene_select = "fraction",
fraction = 0.05,
wgcna_name = "M18_IT"
)
length(seurat_obj@misc$M18_IT$wgcna_genes)
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c('Ex_cluster'),
k = 25,
max_shared = 10,
ident.group = 'Ex_cluster'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
m_obj <- GetMetacellObject(seurat_obj)
ncol(m_obj)
M18_Barcode_counts <- seurat_obj@meta.data[,c(M18_Barcode,'module1','module2',
'module3')]
M18_meta_Barcode_counts <- matrix(nrow = nrow(m_obj@meta.data),
ncol = ncol(M18_Barcode_counts))
rownames(M18_meta_Barcode_counts) <- rownames(m_obj@meta.data)
colnames(M18_meta_Barcode_counts) <- colnames(M18_Barcode_counts)
for (i in 1:nrow(M18_meta_Barcode_counts)){
cells_merged_i <- strsplit(m_obj$cells_merged[i], split = ',', fixed = T)[[1]]
M18_meta_Barcode_counts[i,] <- colMeans(M18_Barcode_counts[cells_merged_i,])
}
seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data <- cbind(seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data, M18_meta_Barcode_counts)
seurat_obj <- SetDatExpr(
seurat_obj,
assay = 'RNA',
slot = 'data'
)
dim(seurat_obj@misc$M18_IT$datExpr)
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
tom_name = 'M18_IT',
deepSplit = 4,
minModuleSize = 100,
mergeCutHeight = 0.2
)
seurat_obj <- ModuleEigengenes(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
head(seurat_obj@misc$M18_IT$MEs)
head(seurat_obj@misc$M18_IT$wgcna_modules)
setwd('F:/1.课题/1.神经环路/4.Newdata/code/')
library(Seurat)
library(ggplot2)
Install.packages('xfun', dependencies=TRUE)
install.packages('xfun', dependencies=TRUE)
library(pheatmap)
library(ggplot2)
allen_proj_merge <- read.csv('connectivity_merge.csv',row.names = 1)
#allen_proj_merge <- t(round(apply(allen_proj_merge,1,function(x){x/max(x)}),2))
#for (i in 1:nrow(allen_proj_merge)){
#  allen_proj_merge[rownames(allen_proj_merge)[i],rownames(allen_proj_merge)[i]] <- NA
#}
row_order <- c('ECT','BLA','VIS','AUD','SSp','RSP','AId','ENT')
p_allen <- pheatmap(allen_proj_merge[row_order,],
cluster_rows = T, cluster_cols = T,
breaks = seq(0,0.5,0.01),
color = colorRampPalette(c("navy", "white","firebrick3"))(50))
inject_area <- c('RSP','ENT','AId','VIS','AUD','SSp','ECT','BLA')
proj_area <- c('SSp','AUD','VIS','AId','RSP','ECT','ENT','BLA','CP','ACB')
module1 <- c('VIS','RSP','SSp','AUD','CP')
module2 <- c('AId','ACB','ECT','ENT','BLA')
link <- matrix(nrow = length(inject_area)*length(proj_area), ncol = 6)
colnames(link) <- c('areaA','moduleA','areaB','moduleB','value','type')
index <- 1
for (i in 1:length(inject_area)){
for (j in 1:length(proj_area)){
link[index,'areaA'] <- inject_area[i]
if (inject_area[i] %in% module1){
link[index,'moduleA'] <- 'module1'
}else{
link[index,'moduleA'] <- 'module2'
}
link[index,'areaB'] <- proj_area[j]
if (proj_area[i] %in% module1){
link[index,'moduleB'] <- 'module1'
}else{
link[index,'moduleB'] <- 'module2'
}
link[index,'value'] <- allen_proj_merge[inject_area[i],proj_area[j]]
if (link[index,'moduleA']==link[index,'moduleB']){
link[index,'type'] <- 'within module'
}else{
link[index,'type'] <- 'across module'
}
index <- index + 1
}
}
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
unique(link$type)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")))
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages("htmltools")
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
all.inte <- readRDS('all.inte.rds')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'Maintype')
all.inte <- FindClusters(all.inte, resolution = 0.8)
DefaultAssay(all.inte) <- 'inte'
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindClusters(all.inte, resolution = 0.8)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:30)
all.inte <- FindClusters(all.inte, resolution = 1)
all.inte <- RunUMAP(all.inte, reduction = "pca", dims = 1:30)
all.inte <- RunTSNE(all.inte, reduction = "pca", dims = 1:30)
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'SingleR')
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages('cli')
install.packages("cli")
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(celldex)
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
all.inte <- readRDS('all.inte.rds')
ref <- celldex::HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
remove. packages('cli')
remove.packages('cli')
remove.packages(cli)
install.packages("cli")
devtools::install_github('dviraran/SingleR')
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method="libcurl")
options(url.method="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
setwd("F:/Github/learn/R/11.Seurat")
library(Seurat)
library(SeuratData)
InstallData("panc8")
data("panc8")
pancreas.list <- SplitObject(panc8, split.by = "tech")
pancreas.list <- pancreas.list[c("celseq", "celseq2", "fluidigmc1", "smartseq2")]
pancreas.list
for (i in 1:length(pancreas.list)) {
pancreas.list[[i]] <- NormalizeData(pancreas.list[[i]], verbose = FALSE)
pancreas.list[[i]] <- FindVariableFeatures(pancreas.list[[i]], selection.method = "vst", nfeatures = 2000, verbose = FALSE)
}
reference.list <- pancreas.list[c("celseq", "celseq2", "smartseq2")]
pancreas.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
pancreas.integrated <- IntegrateData(anchorset = pancreas.anchors, dims = 1:30)
library(ggplot2)
library(cowplot)
library(patchwork)
# switch to integrated assay. The variable features of this assay are automatically set during
# IntegrateData
DefaultAssay(pancreas.integrated) <- "integrated"
# Run the standard workflow for visualization and clustering
pancreas.integrated <- ScaleData(pancreas.integrated, verbose = FALSE)
pancreas.integrated <- RunPCA(pancreas.integrated, npcs = 30, verbose = FALSE)
pancreas.integrated <- RunUMAP(pancreas.integrated, reduction = "pca", dims = 1:30, verbose = FALSE)
p1 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "tech")
p2 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "celltype", label = TRUE, repel = TRUE) +
NoLegend()
p1 + p2
p1 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "tech")
p2 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "celltype", label = TRUE, repel = TRUE) +
NoLegend()
p1 + p2
pancreas.query <- pancreas.list[["fluidigmc1"]]
pancreas.anchors <- FindTransferAnchors(reference = pancreas.integrated, query = pancreas.query, dims = 1:30, reference.reduction = "pca")
predictions <- TransferData(anchorset = pancreas.anchors, refdata = pancreas.integrated$celltype, dims = 1:30)
pancreas.query <- AddMetaData(pancreas.query, metadata = predictions)
pancreas.query$prediction.match <- pancreas.query$predicted.id == pancreas.query$celltype
table(pancreas.query$prediction.match)
table(pancreas.query$predicted.id)
VlnPlot(pancreas.query, c("REG1A", "PPY", "SST", "GHRL", "VWF", "SOX10"), group.by = "predicted.id")
VlnPlot(pancreas.query, c("REG1A", "PPY", "SST", "GHRL", "VWF", "SOX10"), group.by = "predicted.id")
pancreas.integrated <- RunUMAP(pancreas.integrated, dims = 1:30, reduction = "pca", return.model = TRUE)
pancreas.query <- MapQuery(anchorset = pancreas.anchors, reference = pancreas.integrated, query = pancreas.query,
refdata = list(celltype = "celltype"), reference.reduction = "pca", reduction.model = "umap")
p1 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 3,repel = TRUE) + NoLegend() + ggtitle("Reference annotations")
p2 <- DimPlot(pancreas.query, reduction = "ref.umap", group.by = "predicted.celltype", label = TRUE, label.size = 3, repel = TRUE) + NoLegend() + ggtitle("Query transferred labels")
p1 + p2
p1 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 3,repel = TRUE) + NoLegend() + ggtitle("Reference annotations")
p2 <- DimPlot(pancreas.query, reduction = "ref.umap", group.by = "predicted.celltype", label = TRUE, label.size = 3, repel = TRUE) + NoLegend() + ggtitle("Query transferred labels")
p1 + p2
p1 <- DimPlot(pancreas.integrated, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 3,repel = TRUE) + NoLegend() + ggtitle("Reference annotations")
p2 <- DimPlot(pancreas.query, reduction = "ref.umap", group.by = "predicted.celltype", label = TRUE, label.size = 3, repel = TRUE) + NoLegend() + ggtitle("Query transferred labels")
p1 + p2
library(SeuratData)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration run PCA on each
# dataset using these features
features <- SelectIntegrationFeatures(object.list = ifnb.list)
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- ScaleData(x, features = features, verbose = FALSE)
x <- RunPCA(x, features = features, verbose = FALSE)
})
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features, reduction = "rpca")
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(immune.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", group.by = "seurat_annotations", label = TRUE, repel = TRUE)
p1 + p2
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features, reduction = "rpca",
k.anchor = 20)
immune.combined <- IntegrateData(anchorset = immune.anchors)
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
LoadData("ifnb")
ifnb.list <- SplitObject(ifnb, split.by = "stim")
ifnb.list <- lapply(X = ifnb.list, FUN = SCTransform, method = "glmGamPoi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("glmGamPoi")
LoadData("ifnb")
ifnb.list <- SplitObject(ifnb, split.by = "stim")
ifnb.list <- lapply(X = ifnb.list, FUN = SCTransform, method = "glmGamPoi")
features <- SelectIntegrationFeatures(object.list = ifnb.list, nfeatures = 3000)
ifnb.list <- PrepSCTIntegration(object.list = ifnb.list, anchor.features = features)
ifnb.list <- lapply(X = ifnb.list, FUN = RunPCA, features = features)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, normalization.method = "SCT", anchor.features = features, dims = 1:30, reduction = "rpca", k.anchor = 20)
immune.combined.sct <- IntegrateData(anchorset = immune.anchors, normalization.method = "SCT", dims = 1:30)
immune.combined.sct <- RunPCA(immune.combined.sct, verbose = FALSE)
immune.combined.sct <- RunUMAP(immune.combined.sct, reduction = "pca", dims = 1:30)
# Visualization
p1 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "seurat_annotations", label = TRUE,
repel = TRUE)
p1 + p2
