module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
head(seurat_obj@meta.data[,module1])
rowMeans(seurat_obj@meta.data[,module1])
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
seurat_obj$module1 <- rowMeans(seurat_obj@meta.data[,module1])
seurat_obj$module2 <- rowMeans(seurat_obj@meta.data[,module2])
seurat_obj$module3 <- rowMeans(seurat_obj@meta.data[,module3])
head(seurat_obj)
seurat_obj <- SetupForWGCNA(
seurat_obj,
gene_select = "fraction",
fraction = 0.05,
wgcna_name = "M18_IT"
)
length(seurat_obj@misc$M18_IT$wgcna_genes)
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c('Ex_cluster'),
k = 25,
max_shared = 10,
ident.group = 'Ex_cluster'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
m_obj <- GetMetacellObject(seurat_obj)
ncol(m_obj)
M18_Barcode_counts <- seurat_obj@meta.data[,c(M18_Barcode,'module1','module2',
'module3')]
M18_meta_Barcode_counts <- matrix(nrow = nrow(m_obj@meta.data),
ncol = ncol(M18_Barcode_counts))
rownames(M18_meta_Barcode_counts) <- rownames(m_obj@meta.data)
colnames(M18_meta_Barcode_counts) <- colnames(M18_Barcode_counts)
for (i in 1:nrow(M18_meta_Barcode_counts)){
cells_merged_i <- strsplit(m_obj$cells_merged[i], split = ',', fixed = T)[[1]]
M18_meta_Barcode_counts[i,] <- colMeans(M18_Barcode_counts[cells_merged_i,])
}
seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data <- cbind(seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data, M18_meta_Barcode_counts)
seurat_obj <- SetDatExpr(
seurat_obj,
assay = 'RNA',
slot = 'data'
)
dim(seurat_obj@misc$M18_IT$datExpr)
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
tom_name = 'M18_IT',
deepSplit = 4,
minModuleSize = 100,
mergeCutHeight = 0.2
)
seurat_obj <- ModuleEigengenes(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
head(seurat_obj@misc$M18_IT$MEs)
head(seurat_obj@misc$M18_IT$wgcna_modules)
setwd('F:/1.课题/1.神经环路/4.Newdata/code/')
library(Seurat)
library(ggplot2)
Install.packages('xfun', dependencies=TRUE)
install.packages('xfun', dependencies=TRUE)
library(pheatmap)
library(ggplot2)
allen_proj_merge <- read.csv('connectivity_merge.csv',row.names = 1)
#allen_proj_merge <- t(round(apply(allen_proj_merge,1,function(x){x/max(x)}),2))
#for (i in 1:nrow(allen_proj_merge)){
#  allen_proj_merge[rownames(allen_proj_merge)[i],rownames(allen_proj_merge)[i]] <- NA
#}
row_order <- c('ECT','BLA','VIS','AUD','SSp','RSP','AId','ENT')
p_allen <- pheatmap(allen_proj_merge[row_order,],
cluster_rows = T, cluster_cols = T,
breaks = seq(0,0.5,0.01),
color = colorRampPalette(c("navy", "white","firebrick3"))(50))
inject_area <- c('RSP','ENT','AId','VIS','AUD','SSp','ECT','BLA')
proj_area <- c('SSp','AUD','VIS','AId','RSP','ECT','ENT','BLA','CP','ACB')
module1 <- c('VIS','RSP','SSp','AUD','CP')
module2 <- c('AId','ACB','ECT','ENT','BLA')
link <- matrix(nrow = length(inject_area)*length(proj_area), ncol = 6)
colnames(link) <- c('areaA','moduleA','areaB','moduleB','value','type')
index <- 1
for (i in 1:length(inject_area)){
for (j in 1:length(proj_area)){
link[index,'areaA'] <- inject_area[i]
if (inject_area[i] %in% module1){
link[index,'moduleA'] <- 'module1'
}else{
link[index,'moduleA'] <- 'module2'
}
link[index,'areaB'] <- proj_area[j]
if (proj_area[i] %in% module1){
link[index,'moduleB'] <- 'module1'
}else{
link[index,'moduleB'] <- 'module2'
}
link[index,'value'] <- allen_proj_merge[inject_area[i],proj_area[j]]
if (link[index,'moduleA']==link[index,'moduleB']){
link[index,'type'] <- 'within module'
}else{
link[index,'type'] <- 'across module'
}
index <- index + 1
}
}
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
library(tidyverse)
library(viridis)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)
unique(link$type)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")))
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(tidyverse)
library(viridis)
library(ggsignif)
link <- as.data.frame(link)
link$value <- as.numeric(link$value)
link <- link[which(link$areaA != link$areaB),]
ggplot(link, aes(x=type, y=value, fill=type)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=1, alpha=0.9) +
theme_classic()+
theme(
legend.position="none",
plot.title = element_text(size=11)
)+
geom_signif(comparisons = list(c("within module","across module")),
map_signif_level=TRUE)
install.packages("htmltools")
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- celldex::HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
ref <- HumanPrimaryCellAtlasData()
all.inte <- readRDS('all.inte.rds')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'Maintype')
all.inte <- FindClusters(all.inte, resolution = 0.8)
DefaultAssay(all.inte) <- 'inte'
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindClusters(all.inte, resolution = 0.8)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:30)
all.inte <- FindClusters(all.inte, resolution = 1)
all.inte <- RunUMAP(all.inte, reduction = "pca", dims = 1:30)
all.inte <- RunTSNE(all.inte, reduction = "pca", dims = 1:30)
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'seurat_clusters')
DimPlot(all.inte, split.by = 'sample', reduction = 'tsne', label = T, ncol = 2,
group.by = 'SingleR')
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- celldex::HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
# SingleR注释
ref <- HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages('cli')
install.packages("cli")
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(celldex)
library(Seurat)
library(data.table)
library(cowplot)
library(ggplot2)
library(SingleR)
library(celldex)
library(DoubletFinder)
library(dplyr)
library(ggrepel)
all.inte <- readRDS('all.inte.rds')
ref <- celldex::HumanPrimaryCellAtlasData()
devtools::install_github('dviraran/SingleR')
install.packages("cli")
install.packages("cli")
remove. packages('cli')
remove.packages('cli')
remove.packages(cli)
install.packages("cli")
devtools::install_github('dviraran/SingleR')
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method="libcurl")
options(url.method="libcurl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
options(download.file.method = 'libcurl')
options(url.method='libcurl')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
BiocManager::install("SingleR")
setwd("F:/Github/learn/R/Seurat")
library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
ifnb.list
ifnb.list
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
features
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, anchor.features = features)
immune.anchors
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
# 注意我们将对矫正后的数据执行下游分析，原始未修改的数据仍然存在于“RNA” assay 中
DefaultAssay(immune.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
immune.combined <- ScaleData(immune.combined, verbose = FALSE)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:30)
immune.combined <- FindClusters(immune.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
DimPlot(immune.combined, reduction = "umap", split.by = "stim")
# 为了在 integration 后进行差异表达分析，我们切换回原来的数据
DefaultAssay(immune.combined) <- "RNA"
nk.markers <- FindConservedMarkers(immune.combined, ident.1 = 6, grouping.var = "stim", verbose = FALSE)
head(nk.markers)
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A","CCL2", "PPBP"), min.cutoff = "q9")
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A","CCL2", "PPBP"), min.cutoff = "q9")
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A","CCL2", "PPBP"), min.cutoff = "q9")
FeaturePlot(immune.combined, features = c("CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A","CCL2", "PPBP"), min.cutoff = "q9")
immune.combined <- RenameIdents(immune.combined, `0` = "CD14 Mono", `1` = "CD4 Naive T", `2` = "CD4 Memory T", `3` = "CD16 Mono", `4` = "B", `5` = "CD8 T", `6` = "NK", `7` = "T activated", `8` = "DC", `9` = "B Activated", `10` = "Mk", `11` = "pDC", `12` = "Eryth", `13` = "Mono/Mk Doublets", `14` = "HSPC")
DimPlot(immune.combined, label = TRUE)
Idents(immune.combined) <- factor(Idents(immune.combined), levels = c("HSPC", "Mono/Mk Doublets",
"pDC", "Eryth", "Mk", "DC", "CD14 Mono", "CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"))
markers.to.plot <- c("CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7", "CCL5",
"CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1", "CCL2", "S100A9", "HLA-DQA1",
"GPR183", "PPBP", "GNG11", "HBA2", "HBB", "TSPAN13", "IL3RA", "IGJ", "PRSS57")
DotPlot(immune.combined, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "stim") +
RotatedAxis()
Idents(immune.combined) <- factor(Idents(immune.combined), levels = c("HSPC", "Mono/Mk Doublets",
"pDC", "Eryth", "Mk", "DC", "CD14 Mono", "CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"))
markers.to.plot <- c("CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7", "CCL5",
"CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1", "CCL2", "S100A9", "HLA-DQA1",
"GPR183", "PPBP", "GNG11", "HBA2", "HBB", "TSPAN13", "IL3RA", "IGJ", "PRSS57")
DotPlot(immune.combined, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "stim") +
RotatedAxis()
Idents(immune.combined) <- factor(Idents(immune.combined), levels = c("HSPC", "Mono/Mk Doublets",
"pDC", "Eryth", "Mk", "DC", "CD14 Mono", "CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"))
markers.to.plot <- c("CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7", "CCL5",
"CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1", "CCL2", "S100A9", "HLA-DQA1",
"GPR183", "PPBP", "GNG11", "HBA2", "HBB", "TSPAN13", "IL3RA", "IGJ", "PRSS57")
DotPlot(immune.combined, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "stim") +
RotatedAxis()
Idents(immune.combined) <- factor(Idents(immune.combined), levels = c("HSPC", "Mono/Mk Doublets",
"pDC", "Eryth", "Mk", "DC", "CD14 Mono", "CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"))
markers.to.plot <- c("CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7", "CCL5",
"CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1", "CCL2", "S100A9", "HLA-DQA1",
"GPR183", "PPBP", "GNG11", "HBA2", "HBB", "TSPAN13", "IL3RA", "IGJ", "PRSS57")
DotPlot(immune.combined, features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "stim") +
RotatedAxis()
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
t.cells <- subset(immune.combined, idents = "CD4 Naive T")
Idents(t.cells) <- "stim"
avg.t.cells <- as.data.frame(log1p(AverageExpression(t.cells, verbose = FALSE)$RNA))
avg.t.cells$gene <- rownames(avg.t.cells)
cd14.mono <- subset(immune.combined, idents = "CD14 Mono")
Idents(cd14.mono) <- "stim"
avg.cd14.mono <- as.data.frame(log1p(AverageExpression(cd14.mono, verbose = FALSE)$RNA))
avg.cd14.mono$gene <- rownames(avg.cd14.mono)
genes.to.label = c("ISG15", "LY6E", "IFI6", "ISG20", "MX1", "IFIT2", "IFIT1", "CXCL10", "CCL8")
p1 <- ggplot(avg.t.cells, aes(CTRL, STIM)) + geom_point() + ggtitle("CD4 Naive T Cells")
p1 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)
p2 <- ggplot(avg.cd14.mono, aes(CTRL, STIM)) + geom_point() + ggtitle("CD14 Monocytes")
p2 <- LabelPoints(plot = p2, points = genes.to.label, repel = TRUE)
p1 + p2
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
t.cells <- subset(immune.combined, idents = "CD4 Naive T")
Idents(t.cells) <- "stim"
avg.t.cells <- as.data.frame(log1p(AverageExpression(t.cells, verbose = FALSE)$RNA))
avg.t.cells$gene <- rownames(avg.t.cells)
cd14.mono <- subset(immune.combined, idents = "CD14 Mono")
Idents(cd14.mono) <- "stim"
avg.cd14.mono <- as.data.frame(log1p(AverageExpression(cd14.mono, verbose = FALSE)$RNA))
avg.cd14.mono$gene <- rownames(avg.cd14.mono)
genes.to.label = c("ISG15", "LY6E", "IFI6", "ISG20", "MX1", "IFIT2", "IFIT1", "CXCL10", "CCL8")
p1 <- ggplot(avg.t.cells, aes(CTRL, STIM)) + geom_point() + ggtitle("CD4 Naive T Cells")
p1 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)
p2 <- ggplot(avg.cd14.mono, aes(CTRL, STIM)) + geom_point() + ggtitle("CD14 Monocytes")
p2 <- LabelPoints(plot = p2, points = genes.to.label, repel = TRUE)
p1 + p2
immune.combined$celltype.stim <- paste(Idents(immune.combined), immune.combined$stim, sep = "_")
immune.combined$celltype <- Idents(immune.combined)
Idents(immune.combined) <- "celltype.stim"
b.interferon.response <- FindMarkers(immune.combined, ident.1 = "B_STIM", ident.2 = "B_CTRL", verbose = FALSE)
head(b.interferon.response, n = 15)
FeaturePlot(immune.combined, features = c("CD3D", "GNLY", "IFI6"), split.by = "stim", max.cutoff = 3, cols = c("grey", "red"))
FeaturePlot(immune.combined, features = c("CD3D", "GNLY", "IFI6"), split.by = "stim", max.cutoff = 3, cols = c("grey", "red"))
FeaturePlot(immune.combined, features = c("CD3D", "GNLY", "IFI6"), split.by = "stim", max.cutoff = 3, cols = c("grey", "red"))
plots <- VlnPlot(immune.combined, features = c("LYZ", "ISG15", "CXCL10"), split.by = "stim", group.by = "celltype", pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 1)
plots <- VlnPlot(immune.combined, features = c("LYZ", "ISG15", "CXCL10"), split.by = "stim", group.by = "celltype", pt.size = 0, combine = FALSE)
wrap_plots(plots = plots, ncol = 1)
LoadData("ifnb")
ifnb.list <- SplitObject(ifnb, split.by = "stim")
ifnb.list <- lapply(X = ifnb.list, FUN = SCTransform)
features <- SelectIntegrationFeatures(object.list = ifnb.list, nfeatures = 3000)
ifnb.list <- PrepSCTIntegration(object.list = ifnb.list, anchor.features = features)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, normalization.method = "SCT", anchor.features = features)
immune.combined.sct <- IntegrateData(anchorset = immune.anchors, normalization.method = "SCT")
DefaultAssay(immune.combined.sct)
p1 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "stim")
immune.combined.sct <- RunPCA(immune.combined.sct, verbose = FALSE)
immune.combined.sct <- RunUMAP(immune.combined.sct, reduction = "pca", dims = 1:30)
p1 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "seurat_annotations", label = TRUE, repel = TRUE)
p1 + p2
p1 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "seurat_annotations", label = TRUE, repel = TRUE)
p1 + p2
p1 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined.sct, reduction = "umap", group.by = "seurat_annotations", label = TRUE, repel = TRUE)
p1 + p2
