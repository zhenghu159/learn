scale_fill_manual(values = category20)
Proj_area <- c('NAc-i','CPU-i')
gene <- c('Nnat','Deptor','Cdh13')
mat <- matrix(nrow = length(Proj_area), ncol = length(gene))
rownames(mat) <- Proj_area
colnames(mat) <- gene
for (i in 1:length(rownames(mat))){
for (j in 1:length(colnames(mat))){
cell_gene <- colnames(M18.IT)[which(M18.IT@assays$RNA@data[colnames(mat)[j],] > 0)]
proj_area <- paste('M18',rownames(mat)[i],sep='_')
cell_area <- colnames(M18.IT)[which(M18.IT@meta.data[,proj_area]>0)]
mat[i,j] <- length(intersect(cell_area,cell_gene))/length(cell_gene)
}
}
df_plot <- Bior_Dim2to1(mat)
#df_plot$row <- factor(df_plot$row, levels = c('NAc-i','CPU-i'))
#df_plot$col <- factor(df_plot$col, levels = c('Nnat','Deptor'))
ggplot(df_plot, aes(x=col, y=value, fill=row)) +
geom_bar(position="dodge", stat="identity") +
theme_classic()+
labs(x='',y='Project propotion') +
scale_fill_manual(values = category20)
Proj_area <- c('NAc-i','CPU-i')
gene <- c('Nnat','Deptor','Cdh13')
mat <- matrix(nrow = length(Proj_area), ncol = length(gene))
rownames(mat) <- Proj_area
colnames(mat) <- gene
for (i in 1:length(rownames(mat))){
for (j in 1:length(colnames(mat))){
cell_gene <- colnames(M18.IT)[which(M18.IT@assays$RNA@data[colnames(mat)[j],] > 1)]
proj_area <- paste('M18',rownames(mat)[i],sep='_')
cell_area <- colnames(M18.IT)[which(M18.IT@meta.data[,proj_area]>0)]
mat[i,j] <- length(intersect(cell_area,cell_gene))/length(cell_gene)
}
}
df_plot <- Bior_Dim2to1(mat)
#df_plot$row <- factor(df_plot$row, levels = c('NAc-i','CPU-i'))
#df_plot$col <- factor(df_plot$col, levels = c('Nnat','Deptor'))
ggplot(df_plot, aes(x=col, y=value, fill=row)) +
geom_bar(position="dodge", stat="identity") +
theme_classic()+
labs(x='',y='Project propotion') +
scale_fill_manual(values = category20)
Proj_area <- c('NAc-i','CPU-i')
gene <- c('Nnat','Deptor','Cdh13')
mat <- matrix(nrow = length(Proj_area), ncol = length(gene))
rownames(mat) <- Proj_area
colnames(mat) <- gene
for (i in 1:length(rownames(mat))){
for (j in 1:length(colnames(mat))){
cell_gene <- colnames(M18.IT)[which(M18.IT@assays$RNA@data[colnames(mat)[j],] > 1)]
proj_area <- paste('M18',rownames(mat)[i],sep='_')
cell_area <- colnames(M18.IT.barcode)[which(M18.IT.barcode@meta.data[,proj_area]>0.2)]
mat[i,j] <- length(intersect(cell_area,cell_gene))/length(cell_gene)
}
}
df_plot <- Bior_Dim2to1(mat)
#df_plot$row <- factor(df_plot$row, levels = c('NAc-i','CPU-i'))
#df_plot$col <- factor(df_plot$col, levels = c('Nnat','Deptor'))
ggplot(df_plot, aes(x=col, y=value, fill=row)) +
geom_bar(position="dodge", stat="identity") +
theme_classic()+
labs(x='',y='Project propotion') +
scale_fill_manual(values = category20)
library(Seurat)
all.inte <- readRDS('../result/all.inte.barcode.rds')
DimPlot(all.inte, split.by = 'sample', group.by = 'Maintype',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
library(ggplot2)
DimPlot(all.inte, split.by = 'sample', group.by = 'Maintype',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
head(all.inte)
head(Idents(all.inte))
unique(all.inte$Maintype)
all.inte$Maintype[which(all.inte$seurat_clusters==15)] <- 'NPCs'
DimPlot(all.inte, split.by = 'sample', group.by = 'Maintype',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DimPlot(all.inte, split.by = 'sample', group.by = 'seurat_clusters',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- readRDS('../result/all.inte.barcode.rds')
all.inte <- readRDS('../result/all.inte.barcode.rds')
head(all.inte)
all.inte@meta.data <- all.inte@meta.data[,1:6]
head(all.inte)
DefaultAssay(all.inte)
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:20)
all.inte <- FindClusters(all.inte, resolution = 0.4)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
head(Idents(all.inte))
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap', group.by = 'integrated_snn_res.0.4'
label = T, ncol = 2) +
DimPlot(all.inte, split.by = 'sample', reduction = 'umap', group.by = 'integrated_snn_res.0.4',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
Idents(all.inte) <- 'integrated_snn_res.0.4'
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
Idents(all.inte) <- 'integrated_snn_res.0.4'
DimPlot(all.inte, split.by = 'sample', reduction = 'umap', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
unique(Idents(all.inte))
all.inte$seurat_clusters <- all.inte$integrated_snn_res.0.4
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
head(all.inte)
all.inte <- FindSubCluster(all.inte, cluster=3,graph.name="integrated_snn",
resolution = 0.1,
subcluster.name = "integrated_snn_res.0.4")
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- readRDS('../result/all.inte.barcode.rds')
all.inte@meta.data <- all.inte@meta.data[,1:6]
all.inte <- readRDS('../result/all.inte.barcode.rds')
all.inte@meta.data <- all.inte@meta.data[,1:6]
DefaultAssay(all.inte) <- 'integrated'
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- FindClusters(all.inte, resolution = 0.4)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
?FindSubCluster
unique(Idents(all.inte))
head(Idents(all.inte))
head(all.inte$integrated_snn_res.0.4)
all.inte <- FindSubCluster(all.inte, cluster=3,
graph.name="integrated_snn",
resolution = 0.1,
subcluster.name = "integrated_snn_res.0.4")
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
unique(all.inte$integrated_snn_res.0.4)
head(all.inte$integrated_snn_res.0.4)
DefaultAssay(all.inte)
all.inte <- ScaleData(all.inte, verbose = FALSE)
all.inte <- RunPCA(all.inte, npcs = 50, verbose = FALSE)
all.inte <- FindNeighbors(all.inte, reduction = "pca", dims = 1:20)
all.inte <- FindClusters(all.inte, resolution = 0.4)
all.inte <- RunUMAP(all.inte, reduction = "pca", dims = 1:20)
all.inte <- RunTSNE(all.inte, reduction = "pca", dims = 1:20)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = 'integrated_snn_res.0.4', label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- readRDS('../result/all.inte.barcode.rds')
DimPlot(all.inte, split.by = 'sample', group.by = 'seurat_clusters',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
head(all.inte)
DimPlot(all.inte, split.by = 'sample', group.by = 'Maintype',reduction = 'umap',
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DefaultAssay(all.inte)
DefaultAssay(all.inte) <- 'integrated'
all.inte <- FindClusters(all.inte, resolution = 0.5)
head(all.inte)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = "integrated_snn_res.0.5",
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = "integrated_snn_res.0.4",
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- FindClusters(all.inte, resolution = 0.4)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = "integrated_snn_res.0.4",
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = "integrated_snn_res.0.5",
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
all.inte <- FindClusters(all.inte, resolution = 0.6)
DimPlot(all.inte, split.by = 'sample', reduction = 'umap',
group.by = "integrated_snn_res.0.6",
label = T, ncol = 2) +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank(), plot.title = element_text(size = 30)) +
labs(x='', y='')
setwd("F:/1.课题/1.神经环路/4.Newdata/code")
library(Seurat)
library(tidyverse)
library(cowplot)
library(patchwork)
library(WGCNA)
library(hdWGCNA)
library(pheatmap)
library(igraph)
#saveRDS(seurat_obj, file='../result/hdWGCNA_M18.IT.rds')
seurat_obj <- readRDS('../result/hdWGCNA_M18.IT.rds')
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color")
# plot module correlagram
ModuleCorrelogram.mixed(seurat_obj, method = "color")
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color")
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color").mixed()
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color")
?ModuleCorrelogram
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color",diag=FALSE)
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color")
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color",order='hclust')
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color")
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color",type='full')
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color",type='full',col=c('blue','white','red'))
colorRampPalette(c("navy", "white","firebrick3"))(100)
# plot module correlagram
ModuleCorrelogram(seurat_obj, method = "color",type='full',
col=colorRampPalette(c("navy", "white","firebrick3"))(100))
head(GetMEs(seurat_obj, harmonized=FALSE))
head(MEs[,-1])
MEs <- GetMEs(seurat_obj, harmonized=FALSE)
#MEs <- MEs[,-1]
head(MEs)
head(MEs[,-1])
MEs <- GetMEs(seurat_obj, harmonized=FALSE)
MEs <- MEs[,-1]
?cor
MEs <- GetMEs(seurat_obj, harmonized=FALSE)
MEs <- MEs[,-1]
MEs_cor <- cor(MEs, method = "pearson")
View(MEs_cor)
MEs <- GetMEs(seurat_obj, harmonized=FALSE)
MEs <- MEs[,-1]
MEs_cor <- cor(MEs, method = "pearson")
for (i in 1:nrow(MEs_cor)){
MEs_cor[i,i] <- NA
}
View(MEs_cor)
pheatmap(MEs_cor, color=colorRampPalette(c("navy", "white","firebrick3"))(100),
cluster_cols = F, cluster_rows = F)
breaks <- seq(-1,1,0.01)
pheatmap(MEs_cor,
color=colorRampPalette(c("navy", "white","firebrick3"))(length(breaks)),
breaks = breaks,
cluster_cols = T, cluster_rows = T)
breaks <- seq(-1,1,0.01)
pheatmap(MEs_cor,
color=colorRampPalette(c("navy", "white","firebrick3"))(length(breaks)),
breaks = breaks,
display_numbers=T,
cluster_cols = T, cluster_rows = T)
breaks <- seq(-1,1,0.01)
pheatmap(MEs_cor,
color=colorRampPalette(c("navy", "white","firebrick3"))(length(breaks)),
breaks = breaks,
display_numbers=T, number_color='black',
cluster_cols = T, cluster_rows = T)
breaks <- seq(-1,1,0.01)
pheatmap(MEs_cor,
color=colorRampPalette(c("navy", "white","firebrick3"))(length(breaks)),
breaks = breaks,
display_numbers=T, number_color='black',
cluster_cols = T, cluster_rows = T)
breaks <- seq(-1,1,0.01)
pheatmap(MEs_cor,
color=colorRampPalette(c("navy", "white","firebrick3"))(length(breaks)),
breaks = breaks,
display_numbers=T, number_color='black',
cluster_cols = T, cluster_rows = T)
M18_Barcode <- c("M18_Cg-c","M18_M2-c","M18_mPFC-c","M18_AID-i","M18_AID-c",
"M18_AUD-i","M18_ECT-i","M18_LEnt-i","M18_BLA-i","M18_NAc-i",
"M18_NAc-c","M18_CPU-i","M18_CPU-c","M18_S1-i","M18_RSP-i",
"M18_V2-i")
seurat_obj <- ModuleTraitCorrelation(
seurat_obj,
traits = M18_Barcode,
group.by = 'Ex_cluster',
features = "MEs"
)
mt_cor <- GetModuleTraitCorrelation(seurat_obj)
mt_cor$cor$all_cells
?ConstructNetwork
setwd("C:/Users/13081/OneDrive - webmail.hzau.edu.cn/Github/learn/R/WGCNA")
library(WGCNA)
# Read in the female liver data set
femData = read.csv("./FemaleLiver-Data/LiverFemale3600.csv")
# Take a quick look at what is in the data set:
dim(femData)
head(femData)
datExpr0 = as.data.frame(t(femData[, -c(1:8)]))
colnames(datExpr0) = femData$substanceBXH
rownames(datExpr0) = colnames(femData)[-c(1:8)]
View(datExpr0)
datExpr0 = as.data.frame(t(femData[, -c(1:8)]))
colnames(datExpr0) = femData$substanceBXH
rownames(datExpr0) = colnames(femData)[-c(1:8)]
dim(datExpr0)
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree = hclust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5,cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
#abline(h = 15, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read.csv("./FemaleLiver-Data/ClinicalTraits.csv");
# remove columns that hold information we do not need.
allTraits = traitData[, -c(31, 16)];
allTraits = allTraits[, c(2, 11:36) ];
# Form a data frame analogous to expression data that will hold the clinical traits.
femaleSamples = rownames(datExpr);
traitRows = match(femaleSamples, allTraits$Mice)
datTraits = allTraits[traitRows, -1]
rownames(datTraits) = allTraits[traitRows, 1]
collectGarbage()
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors, groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
# 开启多线程
enableWGCNAThreads()
# 载入第一步保存的数据
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit,signed R^2",
type="n", main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)",
ylab="Mean Connectivity", type="n", main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
net = blockwiseModules(datExpr, power = 6, TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE,
pamRespectsDendro = FALSE, saveTOMs = TRUE,
saveTOMFileBase = "femaleMouseTOM", verbose = 3)
# 参数解释
# power = 6是刚才选择的软阈值
# minModuleSize：模块中最少的基因数
# mergeCutHeight：模块合并阈值，阈值越大，模块越少
# saveTOMs = TRUE,saveTOMFileBase = "femaleMouseTOM"保存TOM矩阵，名字为"femaleMouseTOM"
# net$colors 包含模块分配，net$MEs 包含模块的模块特征基因。
getwd()
table(net$colors)
getwd()
sizeGrWindow(12, 9)
mergedColors = labels2colors(net$colors)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
net$dendrograms
mergedColors
net$blockGenes[[1]]
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "FemaleLiver-02-networkConstruction-auto.RData")
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
View(allTraits)
