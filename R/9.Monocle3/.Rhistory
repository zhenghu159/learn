df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 10000) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both") +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
?geom_text_repel
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both", label.padding = 0.4) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both", label.padding = 0.4) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="both", min.segment.length = 0.05,
segment.alpha=0.6,label.padding = 0.4,max.overlaps =30,
nudge_x = 0.2,nudge_y=0.2) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="y", min.segment.length = 0.05,
segment.alpha=0.6, max.overlaps =30) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="both", min.segment.length = 0.05,
segment.alpha=0.6, max.overlaps =30) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
head(seurat_obj)
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
head(seurat_obj@meta.data[,module1])
rowMeans(seurat_obj@meta.data[,module1])
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
seurat_obj$module1 <- rowMeans(seurat_obj@meta.data[,module1])
seurat_obj$module2 <- rowMeans(seurat_obj@meta.data[,module2])
seurat_obj$module3 <- rowMeans(seurat_obj@meta.data[,module3])
head(seurat_obj)
seurat_obj <- SetupForWGCNA(
seurat_obj,
gene_select = "fraction",
fraction = 0.05,
wgcna_name = "M18_IT"
)
length(seurat_obj@misc$M18_IT$wgcna_genes)
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c('Ex_cluster'),
k = 25,
max_shared = 10,
ident.group = 'Ex_cluster'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
m_obj <- GetMetacellObject(seurat_obj)
ncol(m_obj)
M18_Barcode_counts <- seurat_obj@meta.data[,c(M18_Barcode,'module1','module2',
'module3')]
M18_meta_Barcode_counts <- matrix(nrow = nrow(m_obj@meta.data),
ncol = ncol(M18_Barcode_counts))
rownames(M18_meta_Barcode_counts) <- rownames(m_obj@meta.data)
colnames(M18_meta_Barcode_counts) <- colnames(M18_Barcode_counts)
for (i in 1:nrow(M18_meta_Barcode_counts)){
cells_merged_i <- strsplit(m_obj$cells_merged[i], split = ',', fixed = T)[[1]]
M18_meta_Barcode_counts[i,] <- colMeans(M18_Barcode_counts[cells_merged_i,])
}
seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data <- cbind(seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data, M18_meta_Barcode_counts)
seurat_obj <- SetDatExpr(
seurat_obj,
assay = 'RNA',
slot = 'data'
)
dim(seurat_obj@misc$M18_IT$datExpr)
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
tom_name = 'M18_IT',
deepSplit = 4,
minModuleSize = 100,
mergeCutHeight = 0.2
)
seurat_obj <- ModuleEigengenes(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
head(seurat_obj@misc$M18_IT$MEs)
head(seurat_obj@misc$M18_IT$wgcna_modules)
setwd("F:/Github/learn/R/Monocle3")
expression_matrix <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/packer_embryo_expression.rds"))
cell_metadata <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/packer_embryo_colData.rds"))
gene_annotation <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/packer_embryo_rowData.rds"))
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 50)
library(monocle3)
cds <- preprocess_cds(cds, num_dim = 50)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
library(monocle3)
cds <- preprocess_cds(cds, num_dim = 50)
cds <- align_cds(cds, alignment_group = "batch", residual_model_formula_str = "~ bg.300.loading + bg.400.loading + bg.500.1.loading + bg.500.2.loading + bg.r17.loading + bg.b01.loading + bg.b02.loading")
cds <- reduce_dimension(cds)
plot_cells(cds, label_groups_by_cluster=FALSE,  color_cells_by = "cell.type")
ciliated_genes <- c("che-1",
"hlh-17",
"nhr-6",
"dmd-6",
"ceh-36",
"ham-1")
plot_cells(cds,
genes=ciliated_genes,
label_cell_groups=FALSE,
show_trajectory_graph=FALSE)
cds <- cluster_cells(cds)
plot_cells(cds, color_cells_by = "partition")
cds <- learn_graph(cds)
plot_cells(cds,
color_cells_by = "cell.type",
label_groups_by_cluster=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE)
plot_cells(cds,
color_cells_by = "embryo.time.bin",
label_cell_groups=FALSE,
label_leaves=TRUE,
label_branch_points=TRUE,
graph_label_size=1.5)
cds <- order_cells(cds)
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5)
# a helper function to identify the root principal points:
get_earliest_principal_node <- function(cds, time_bin="130-170"){
cell_ids <- which(colData(cds)[, "embryo.time.bin"] == time_bin)
closest_vertex <-
cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
root_pr_nodes <-
igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names
(which.max(table(closest_vertex[cell_ids,]))))]
root_pr_nodes
}
cds <- order_cells(cds, root_pr_nodes=get_earliest_principal_node(cds))
plot_cells(cds,
color_cells_by = "pseudotime",
label_cell_groups=FALSE,
label_leaves=FALSE,
label_branch_points=FALSE,
graph_label_size=1.5)
cds_sub <- choose_graph_segments(cds)
cds_sub <- choose_graph_segments(cds)
cds_3d <- reduce_dimension(cds, max_components = 3)
cds_3d <- cluster_cells(cds_3d)
cds_3d <- learn_graph(cds_3d)
cds_3d <- order_cells(cds_3d, root_pr_nodes=get_earliest_principal_node(cds))
cds_3d_plot_obj <- plot_cells_3d(cds_3d, color_cells_by="partition")
