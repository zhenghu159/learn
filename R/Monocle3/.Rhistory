}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both") +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
?geom_text_repel
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both", label.padding = 0.4) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size, max.overlaps = 100,
force=10, direction="both", label.padding = 0.4) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="both", min.segment.length = 0.05,
segment.alpha=0.6,label.padding = 0.4,max.overlaps =30,
nudge_x = 0.2,nudge_y=0.2) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="y", min.segment.length = 0.05,
segment.alpha=0.6, max.overlaps =30) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
GSMMplot <- function(M, project, color, label_size=3, point.size=2,
stat.size=3){
M_gene <- module$gene_name[which(module$module==M)]
df <- data.frame('MM'=MM[M_gene,M],
'GS'=GS[M_gene,project],
row.names = M_gene)
df$label <- ''
if (mean(df$GS)>0){
top5 <- order(df$GS, decreasing = T)[1:5]
df$label[top5] <- rownames(df)[top5]
}else{
bom5 <- order(df$GS, decreasing = F)[1:5]
df$label[bom5] <- rownames(df)[bom5]
}
cor_MM_GS <- round(cor(df$MM, df$GS, method = 'pearson')[1],2)
p <- ggplot(df, aes(x=MM, y=GS)) +
geom_point(size=point.size, color=color) +
geom_smooth(method = "lm", formula = y~x, color = "black", fill = "lightgray") +
geom_text_repel(aes(label=label), size=label_size,
direction="both", min.segment.length = 0.05,
segment.alpha=0.6, max.overlaps =30) +
theme_bw() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
text=element_text(size=10),plot.title = element_text(hjust = 0.5)) +
labs(title = paste(M,'VS', project, ' (R = ', cor_MM_GS ,')'),
x=paste('Module Membership in', M),
y=paste('Gene significance for', project))
return(p)
}
project_list <- rep(c(barcode_order,'module1','module2','module3'),rep(2,19))
M_list <- c('IT-M6','IT-M4','IT-M3','IT-M11','IT-M3','IT-M11','IT-M2','IT-M5',
'IT-M12','IT-M7','IT-M2','IT-M4','IT-M12','IT-M3','IT-M2','IT-M4',
'IT-M11','IT-M3','IT-M5','IT-M2','IT-M7','IT-M6','IT-M3','IT-M11',
'IT-M3','IT-M11','IT-M3','IT-M11','IT-M3','IT-M12','IT-M3','IT-M12',
'IT-M2','IT-M7','IT-M11','IT-M3','IT-M3','IT-M11')
plist <- list()
for (i in 1:length(project_list)) {
project <- project_list[i]
M <- M_list[i]
color <- module$color[grep(M,module$module)[1]]
plist[[i]] <- GSMMplot(M, project, color)
}
plot_grid(plotlist = plist, ncol = 4)
head(seurat_obj)
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
head(seurat_obj@meta.data[,module1])
rowMeans(seurat_obj@meta.data[,module1])
module1 <- c('M18_AID-c','M18_M2-c','M18_AUD-i','M18_CPU-i','M18_S1-i',
'M18_RSP-i','M18_V2-i')
module2 <- c('M18_NAc-i','M18_AID-i','M18_BLA-i','M18_ECT-i','M18_LEnt-i')
module3 <- c('M18_CPU-c','M18_Cg-c','M18_NAc-c','M18_mPFC-c')
seurat_obj$module1 <- rowMeans(seurat_obj@meta.data[,module1])
seurat_obj$module2 <- rowMeans(seurat_obj@meta.data[,module2])
seurat_obj$module3 <- rowMeans(seurat_obj@meta.data[,module3])
head(seurat_obj)
seurat_obj <- SetupForWGCNA(
seurat_obj,
gene_select = "fraction",
fraction = 0.05,
wgcna_name = "M18_IT"
)
length(seurat_obj@misc$M18_IT$wgcna_genes)
seurat_obj <- MetacellsByGroups(
seurat_obj = seurat_obj,
group.by = c('Ex_cluster'),
k = 25,
max_shared = 10,
ident.group = 'Ex_cluster'
)
seurat_obj <- NormalizeMetacells(seurat_obj)
m_obj <- GetMetacellObject(seurat_obj)
ncol(m_obj)
M18_Barcode_counts <- seurat_obj@meta.data[,c(M18_Barcode,'module1','module2',
'module3')]
M18_meta_Barcode_counts <- matrix(nrow = nrow(m_obj@meta.data),
ncol = ncol(M18_Barcode_counts))
rownames(M18_meta_Barcode_counts) <- rownames(m_obj@meta.data)
colnames(M18_meta_Barcode_counts) <- colnames(M18_Barcode_counts)
for (i in 1:nrow(M18_meta_Barcode_counts)){
cells_merged_i <- strsplit(m_obj$cells_merged[i], split = ',', fixed = T)[[1]]
M18_meta_Barcode_counts[i,] <- colMeans(M18_Barcode_counts[cells_merged_i,])
}
seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data <- cbind(seurat_obj@misc$M18_IT$wgcna_metacell_obj@meta.data, M18_meta_Barcode_counts)
seurat_obj <- SetDatExpr(
seurat_obj,
assay = 'RNA',
slot = 'data'
)
dim(seurat_obj@misc$M18_IT$datExpr)
seurat_obj <- ConstructNetwork(
seurat_obj,
soft_power=4,
tom_name = 'M18_IT',
deepSplit = 4,
minModuleSize = 100,
mergeCutHeight = 0.2
)
seurat_obj <- ModuleEigengenes(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
seurat_obj <- ModuleConnectivity(
seurat_obj
)
head(seurat_obj@misc$M18_IT$MEs)
head(seurat_obj@misc$M18_IT$wgcna_modules)
setwd("~/")
setwd("F:/Github/learn/R/Monocle3")
library(monocle3)
library(dplyr) # imported for some downstream data manipulation
expression_matrix <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/cao_l2_expression.rds"))
cell_metadata <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/cao_l2_colData.rds"))
gene_annotation <- readRDS(url("https://depts.washington.edu:/trapnell-lab/software/monocle3/celegans/data/cao_l2_rowData.rds"))
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
cds <- preprocess_cds(cds, num_dim = 100)
plot_pc_variance_explained(cds)
cds <- reduce_dimension(cds)
plot_cells(cds)
plot_cells(cds, color_cells_by="cao_cell_type")
plot_cells(cds, genes=c("cpna-2", "egl-21", "ram-2", "inos-1"))
```
plot_cells(cds, genes=c("cpna-2", "egl-21", "ram-2", "inos-1"))
cds <- reduce_dimension(cds, reduction_method="tSNE")
plot_cells(cds, reduction_method="tSNE", color_cells_by="cao_cell_type")
plot_cells(cds, color_cells_by="plate", label_cell_groups=FALSE)
cds <- align_cds(cds, num_dim = 100, alignment_group = "plate")
cds <- reduce_dimension(cds)
plot_cells(cds, color_cells_by="plate", label_cell_groups=FALSE)
cds <- cluster_cells(cds, resolution=1e-5)
plot_cells(cds)
plot_cells(cds, color_cells_by="partition", group_cells_by="partition")
plot_cells(cds, color_cells_by="cao_cell_type")
plot_cells(cds, color_cells_by="cao_cell_type", label_groups_by_cluster=FALSE)
marker_test_res <- top_markers(cds, group_cells_by="partition",
reference_cells=1000, cores=8)
top_specific_markers <- marker_test_res %>%
filter(fraction_expressing >= 0.10) %>%
group_by(cell_group) %>%
top_n(1, pseudo_R2)
top_specific_marker_ids <- unique(top_specific_markers %>% pull(gene_id))
plot_genes_by_group(cds,
top_specific_marker_ids,
group_cells_by="partition",
ordering_type="maximal_on_diag",
max.size=3)
top_specific_markers <- marker_test_res %>%
filter(fraction_expressing >= 0.10) %>%
group_by(cell_group) %>%
top_n(3, pseudo_R2)
top_specific_marker_ids <- unique(top_specific_markers %>% pull(gene_id))
plot_genes_by_group(cds,
top_specific_marker_ids,
group_cells_by="partition",
ordering_type="cluster_row_col",
max.size=3)
top_specific_markers <- marker_test_res %>%
filter(fraction_expressing >= 0.10) %>%
group_by(cell_group) %>%
top_n(3, pseudo_R2)
top_specific_marker_ids <- unique(top_specific_markers %>% pull(gene_id))
plot_genes_by_group(cds,
top_specific_marker_ids,
group_cells_by="partition",
ordering_type="cluster_row_col",
max.size=3)
colData(cds)$assigned_cell_type <- as.character(partitions(cds))
colData(cds)$assigned_cell_type <- dplyr::recode(colData(cds)$assigned_cell_type,
"1"="Body wall muscle",
"2"="Germline",
"3"="Motor neurons",
"4"="Seam cells",
"5"="Sex myoblasts",
"6"="Socket cells",
"7"="Marginal_cell",
"8"="Coelomocyte",
"9"="Am/PH sheath cells",
"10"="Ciliated neurons",
"11"="Intestinal/rectal muscle",
"12"="Excretory gland",
"13"="Chemosensory neurons",
"14"="Interneurons",
"15"="Unclassified eurons",
"16"="Ciliated neurons",
"17"="Pharyngeal gland cells",
"18"="Unclassified neurons",
"19"="Chemosensory neurons",
"20"="Ciliated neurons",
"21"="Ciliated neurons",
"22"="Inner labial neuron",
"23"="Ciliated neurons",
"24"="Ciliated neurons",
"25"="Ciliated neurons",
"26"="Hypodermal cells",
"27"="Mesodermal cells",
"28"="Motor neurons",
"29"="Pharyngeal gland cells",
"30"="Ciliated neurons",
"31"="Excretory cells",
"32"="Amphid neuron",
"33"="Pharyngeal muscle")
plot_cells(cds, group_cells_by="partition", color_cells_by="assigned_cell_type")
cds_subset <- choose_cells(cds)
pr_graph_test_res <- graph_test(cds_subset, neighbor_graph="knn", cores=8)
pr_deg_ids <- row.names(subset(pr_graph_test_res, morans_I > 0.01 & q_value < 0.05))
gene_module_df <- find_gene_modules(cds_subset[pr_deg_ids,], resolution=1e-3)
plot_cells(cds_subset, genes=gene_module_df,
show_trajectory_graph=FALSE,
label_cell_groups=FALSE)
cds_subset <- cluster_cells(cds_subset, resolution=1e-2)
plot_cells(cds_subset, color_cells_by="cluster")
colData(cds_subset)$assigned_cell_type <- as.character(clusters(cds_subset)[colnames(cds_subset)])
colData(cds_subset)$assigned_cell_type <- dplyr::recode(colData(cds_subset)$assigned_cell_type,
"1"="Sex myoblasts",
"2"="Somatic gonad precursors",
"3"="Vulval precursors",
"4"="Sex myoblasts",
"5"="Vulval precursors",
"6"="Somatic gonad precursors",
"7"="Sex myoblasts",
"8"="Sex myoblasts",
"9"="Ciliated neurons",
"10"="Vulval precursors",
"11"="Somatic gonad precursor",
"12"="Distal tip cells",
"13"="Somatic gonad precursor",
"14"="Sex myoblasts",
"15"="Vulval precursors")
plot_cells(cds_subset, group_cells_by="cluster", color_cells_by="assigned_cell_type")
colData(cds)[colnames(cds_subset),]$assigned_cell_type <- colData(cds_subset)$assigned_cell_type
cds <- cds[,colData(cds)$assigned_cell_type != "Failed QC" | is.na(colData(cds)$assigned_cell_type )]
plot_cells(cds, group_cells_by="partition",
color_cells_by="assigned_cell_type",
labels_per_group=5)
assigned_type_marker_test_res <- top_markers(cds,
group_cells_by="assigned_cell_type",
reference_cells=1000,
cores=8)
# Require that markers have at least JS specificty score > 0.5 and
# be significant in the logistic test for identifying their cell type:
garnett_markers <- assigned_type_marker_test_res %>%
filter(marker_test_q_value < 0.01 & specificity >= 0.5) %>%
group_by(cell_group) %>%
top_n(5, marker_score)
# Exclude genes that are good markers for more than one cell type:
garnett_markers <- garnett_markers %>%
group_by(gene_short_name) %>%
filter(n() == 1)
generate_garnett_marker_file(garnett_markers, file="./marker_file.txt")
library(garnett)
# install gene database for worm
BiocManager::install("org.Ce.eg.db")
colData(cds)$garnett_cluster <- clusters(cds)
worm_classifier <- train_cell_classifier(cds = cds,
marker_file = "./marker_file.txt",
db=org.Ce.eg.db::org.Ce.eg.db,
cds_gene_id_type = "ENSEMBL",
num_unknown = 50,
marker_file_gene_id_type = "SYMBOL",
cores=8)
cds <- classify_cells(cds, worm_classifier,
db = org.Ce.eg.db::org.Ce.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "ENSEMBL")
#library(garnett)
# install gene database for worm
#BiocManager::install("org.Ce.eg.db")
library(garnett)
# install gene database for worm
BiocManager::install("org.Ce.eg.db")
plot_cells(cds,
group_cells_by="partition",
color_cells_by="cluster_ext_type")
library(org.Ce.eg.db)
ceWhole <- readRDS(url("https://cole-trapnell-lab.github.io/garnett/classifiers/ceWhole_20191017.RDS"))
cds <- classify_cells(cds, ceWhole,
db = org.Ce.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "ENSEMBL")
